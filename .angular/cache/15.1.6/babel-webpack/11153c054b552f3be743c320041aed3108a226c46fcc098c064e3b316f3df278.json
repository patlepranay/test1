{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { interval, map, take, concat, of, delay, ignoreElements, tap, from, concatMap, repeat } from 'rxjs';\nlet TypingAnimatorDirective = /*#__PURE__*/(() => {\n  class TypingAnimatorDirective {\n    constructor(elRef) {\n      this.elRef = elRef;\n      this.defaults = {\n        typeSpeed: 50,\n        deleteSpeed: 30,\n        startDelay: 0,\n        showCursor: true\n      };\n      this.typeSpeed = this.defaults.typeSpeed;\n      this.deleteSpeed = this.defaults.deleteSpeed;\n      this.startDelay = this.defaults.startDelay;\n      this.showCursor = this.defaults.showCursor;\n      this.onComplete = new EventEmitter();\n      this.onDeleted = new EventEmitter();\n      this.type = (word, speed, backwards = false) => interval(speed).pipe(map(x => backwards ? word.substring(0, word.length - x - 1) : word.substring(0, x + 1)), take(word.length));\n      this.typeEffect = word => concat(this.type(word, this.typeSpeed), of('').pipe(delay(1200), ignoreElements(), tap(() => this.onComplete.emit({\n        word: word\n      }))), this.type(word, this.deleteSpeed, true), of('').pipe(delay(300), ignoreElements(), tap(() => this.onDeleted.emit({\n        word: word\n      }))));\n    }\n    ngAfterViewInit() {\n      setTimeout(() => {\n        if (this.showCursor) {\n          this.insertCursor();\n          this.appendStyling();\n        }\n        from(this.sentences).pipe(concatMap(this.typeEffect), repeat()).subscribe(x => this.elRef.nativeElement.textContent = x);\n      }, this.startDelay);\n    }\n    insertCursor() {\n      if (this.cursor) {\n        return;\n      }\n      this.cursor = document.createElement('span');\n      this.cursor.className = 'typed-cursor';\n      this.cursor.innerHTML = '|';\n      this.elRef.nativeElement.parentNode && this.elRef.nativeElement.parentNode.insertBefore(this.cursor, this.elRef.nativeElement.nextSibling);\n    }\n    appendStyling() {\n      if (this.showCursor) {\n        if (document.head.querySelector('#typing')) {\n          return;\n        }\n        const css = document.createElement('style');\n        css.id = 'typing';\n        css.innerHTML = `\n        .typed-cursor {\n            opacity: 1;\n            animation: typedjsBlink 0.7s infinite;\n            -webkit-animation: typedjsBlink 0.7s infinite;\n            animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink {\n            50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink {\n            0% { opacity: 1; }\n            50% { opacity: 0.0; }\n            100% { opacity: 1; }\n        }\n      `;\n        document.head.appendChild(css);\n      }\n    }\n  }\n  TypingAnimatorDirective.ɵfac = function TypingAnimatorDirective_Factory(t) {\n    return new (t || TypingAnimatorDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  TypingAnimatorDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TypingAnimatorDirective,\n    selectors: [[\"\", \"typingAnimator\", \"\"]],\n    inputs: {\n      sentences: \"sentences\",\n      typeSpeed: \"typeSpeed\",\n      deleteSpeed: \"deleteSpeed\",\n      startDelay: \"startDelay\",\n      showCursor: \"showCursor\"\n    },\n    outputs: {\n      onComplete: \"onComplete\",\n      onDeleted: \"onDeleted\"\n    }\n  });\n  return TypingAnimatorDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TypingAnimatorModule = /*#__PURE__*/(() => {\n  class TypingAnimatorModule {}\n  TypingAnimatorModule.ɵfac = function TypingAnimatorModule_Factory(t) {\n    return new (t || TypingAnimatorModule)();\n  };\n  TypingAnimatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TypingAnimatorModule\n  });\n  TypingAnimatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TypingAnimatorModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of angular-typing-animator\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TypingAnimatorDirective, TypingAnimatorModule };\n//# sourceMappingURL=angular-typing-animator.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}