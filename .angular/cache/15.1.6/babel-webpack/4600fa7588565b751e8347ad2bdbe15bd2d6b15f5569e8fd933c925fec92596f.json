{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst LOCAL_URL = environment.localEnv;\nconst GLOBAL_URL = environment.globalEnv;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuthenticated = false;\n      this.authStatusListener = new Subject();\n    }\n    getToken() {\n      return this.token;\n    }\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n    getAuthStatusListener() {\n      return this.authStatusListener.asObservable();\n    }\n    createUser(email, password) {\n      const authData = {\n        email: email,\n        password: password\n      };\n      this.http.post(GLOBAL_URL + \"/krishi_sarthi/signup/admin/2112\", authData).subscribe(response => {\n        console.log(response);\n        this.router.navigate([\"/\"]);\n      });\n    }\n    login(email, password) {\n      const authData = {\n        email: email,\n        password: password\n      };\n      this.http.post(GLOBAL_URL + \"/krishi_sarthi/login/admin/2112\", authData).subscribe(response => {\n        const token = response.token;\n        this.token = token;\n        if (token) {\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.authStatusListener.next(true);\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n          console.log(expirationDate);\n          this.saveAuthData(token, expirationDate);\n          this.router.navigate([\"/approve\"]);\n        }\n      });\n    }\n    autoAuthUser() {\n      const authInformation = this.getAuthData();\n      if (!authInformation) {\n        return;\n      }\n      const now = new Date();\n      const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n      if (expiresIn > 0) {\n        this.token = authInformation.token;\n        this.isAuthenticated = true;\n        this.setAuthTimer(expiresIn / 1000);\n        this.authStatusListener.next(true);\n      }\n    }\n    logout() {\n      this.token = null;\n      this.isAuthenticated = false;\n      this.authStatusListener.next(false);\n      clearTimeout(this.tokenTimer);\n      this.clearAuthData();\n      this.router.navigate([\"/\"]);\n    }\n    setAuthTimer(duration) {\n      console.log(\"Setting timer: \" + duration);\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, duration * 1000);\n    }\n    saveAuthData(token, expirationDate) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expiration\", expirationDate.toISOString());\n    }\n    clearAuthData() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expiration\");\n    }\n    getAuthData() {\n      const token = localStorage.getItem(\"token\");\n      const expirationDate = localStorage.getItem(\"expiration\");\n      if (!token || !expirationDate) {\n        return;\n      }\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate)\n      };\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}